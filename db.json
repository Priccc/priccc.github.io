{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"themes/my-theme/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/my-theme/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/my-theme/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/my-theme/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/my-theme/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/my-theme/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/my-theme/source/images/about.png","path":"images/about.png","modified":0,"renderable":1},{"_id":"themes/my-theme/source/images/archives.png","path":"images/archives.png","modified":0,"renderable":1},{"_id":"themes/my-theme/source/images/home.png","path":"images/home.png","modified":0,"renderable":1},{"_id":"themes/my-theme/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/my-theme/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/my-theme/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"source/images/post/string-video-1.png","path":"images/post/string-video-1.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/my-theme/LICENSE","hash":"44409ab0bcd7853e2ac93faad84e57299711e6bf","modified":1534130920843},{"_id":"themes/my-theme/README.md","hash":"2f14b9c1e7ad23e03da0599a9f348d61c79c474f","modified":1534130920844},{"_id":"themes/my-theme/_config.yml","hash":"c382491bf0f330251adffe118eca7665c5d3748e","modified":1534148961171},{"_id":"source/_posts/todo-list.md","hash":"87c6b6844ad39719b0a13336e2e4e03b2f3a0c27","modified":1534218164457},{"_id":"source/about/index.md","hash":"0c93a7e37e895d6e3b434123ef53bb5a394e9e07","modified":1534145678599},{"_id":"source/images/avatar.jpg","hash":"b0f8486cd44ae3365191e773e3aaa1531017f1e4","modified":1534130920841},{"_id":"source/images/favicon.ico","hash":"359dfb2caa1b57781a813c1c12158d490c781642","modified":1534146174392},{"_id":"themes/my-theme/layout/archive.ejs","hash":"a8d4d5e7892bbac0c6228f821473df61e943b44d","modified":1534139841235},{"_id":"themes/my-theme/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1534130920860},{"_id":"themes/my-theme/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1534130920860},{"_id":"themes/my-theme/layout/layout.ejs","hash":"c137d708da9c5339dbcdf2e45c4851c08899a457","modified":1534925460549},{"_id":"themes/my-theme/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534130920861},{"_id":"themes/my-theme/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534130920862},{"_id":"themes/my-theme/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1534130920862},{"_id":"themes/my-theme/source/style.less","hash":"ad50444f75534f36001872d4c90e1d839614402b","modified":1534130920902},{"_id":"themes/my-theme/layout/_partial/archive.ejs","hash":"7d811a088748b758c0664645629adbebdd8d1c3f","modified":1534130920846},{"_id":"themes/my-theme/layout/_partial/article.ejs","hash":"a4ef93c978a50cf194604a8de127d977ab054fc6","modified":1534924321160},{"_id":"themes/my-theme/layout/_partial/categories.ejs","hash":"761fda43c385e81324b628dfab6377b82bfdf82a","modified":1534130920849},{"_id":"themes/my-theme/layout/_partial/footer.ejs","hash":"284578f7c860cc659c4aed2edac4fa776ff03297","modified":1534130920850},{"_id":"themes/my-theme/layout/_partial/head.ejs","hash":"ed75a225967c731e233e20699549fac153bd16f5","modified":1534925360811},{"_id":"themes/my-theme/layout/_partial/header.ejs","hash":"ebeab32eb927cbd4a05fc95230a958898ebc496c","modified":1534149533228},{"_id":"themes/my-theme/layout/_partial/loading.ejs","hash":"9c5721d5a5cff00860f2775b12dd73fe62375201","modified":1534130920853},{"_id":"themes/my-theme/layout/_partial/post.ejs","hash":"e9175721ad2a9dfd8d9c20fdf18e7f62bafcb456","modified":1534138506634},{"_id":"themes/my-theme/layout/_partial/scripts.ejs","hash":"c95978a2621a5a06efe63cba685170e4b4704369","modified":1534926109152},{"_id":"themes/my-theme/layout/_partial/side.ejs","hash":"bbb8b759e1e2233d391b6a0bc8f929222ff7ad98","modified":1534139728932},{"_id":"themes/my-theme/layout/_widget/about.ejs","hash":"6f3a2329378e8abc49b5d2379a4458f42de35d30","modified":1534924763062},{"_id":"themes/my-theme/layout/_widget/categories.ejs","hash":"4760d23e4b3903f5a3f7c94dd339477e223043f1","modified":1534146997620},{"_id":"themes/my-theme/layout/_widget/links.ejs","hash":"72367aae5374f030f40869996219857ac1ff1c8d","modified":1534130920858},{"_id":"themes/my-theme/layout/_widget/tagcloud.ejs","hash":"9e030fb6a6ee366db3f8dde360bc4ddb44b63ac4","modified":1534146992727},{"_id":"themes/my-theme/source/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1534130920878},{"_id":"themes/my-theme/snapshots/phone.png","hash":"8e78f25ee179e3ff27fff101050792184935d319","modified":1534130920877},{"_id":"themes/my-theme/source/fonts/icomoon.svg","hash":"37a9d40dfcd7d156cf452db75c425e797351e2b5","modified":1534130920878},{"_id":"themes/my-theme/source/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1534130920878},{"_id":"themes/my-theme/source/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1534130920879},{"_id":"themes/my-theme/source/fonts/selection.json","hash":"498b5ba0cafb2eb5fa20f9034527eb912fa41827","modified":1534130920879},{"_id":"themes/my-theme/source/images/about.png","hash":"de21ece0eef8733b3610e3322dada62e942926aa","modified":1523523118000},{"_id":"themes/my-theme/source/images/archives.png","hash":"712327eb3e9f2154cae6f239e87c07676bd3fb6f","modified":1523523152000},{"_id":"themes/my-theme/source/images/home.png","hash":"8f99625fdd6232b578c6ea18d05a8a1655e75338","modified":1523523924000},{"_id":"themes/my-theme/source/js/app.js","hash":"17aca227d841b932ac33af4c9e02a192832fdc85","modified":1534130920880},{"_id":"themes/my-theme/source/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1534130920880},{"_id":"themes/my-theme/source/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1534130920881},{"_id":"themes/my-theme/source/less/_archive.less","hash":"0b15989a0d19ce550cf5d0021376c5ad1d4790b9","modified":1534130920882},{"_id":"themes/my-theme/source/less/_article.less","hash":"37d645669b564df960c02680c0ee6532361b4d7b","modified":1534130920882},{"_id":"themes/my-theme/source/less/_base.less","hash":"52af49a25d0bf4436b37264bbf2a4f34dcfbecb0","modified":1534924553896},{"_id":"themes/my-theme/source/less/_defines.less","hash":"6b8ffd4e1b478e046722487bae15a500f3fd3092","modified":1534130920885},{"_id":"themes/my-theme/source/less/_fonts.less","hash":"d9e56fa5affcdee1c530ee5d5268a7e07644c05a","modified":1534130920887},{"_id":"themes/my-theme/source/less/_footer.less","hash":"1d3647d28c5949417b3102d4f30cfcc0dcf9a200","modified":1534130920887},{"_id":"themes/my-theme/source/less/_header.less","hash":"e2ae5bd213a2254514f3e63a94b75faf1cfe7269","modified":1534149557819},{"_id":"themes/my-theme/source/less/_main.less","hash":"6e2c43e15d1e05bcddbccc1d4830b4687261f1eb","modified":1534130920891},{"_id":"themes/my-theme/source/less/_normalize.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1534130920892},{"_id":"themes/my-theme/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1534130920895},{"_id":"themes/my-theme/source/less/_search.less","hash":"ab1e3d8fdd489adde30723c40726e5e8187a8b6c","modified":1534130920897},{"_id":"themes/my-theme/source/less/_side.less","hash":"4d7d016ad062f8e8ffd74f1bca2e25728e2b482d","modified":1534130920898},{"_id":"themes/my-theme/source/less/_toc.less","hash":"76729eb95cf89eb17436e13610847102d4795a63","modified":1534130920899},{"_id":"themes/my-theme/source/less/_tog.less","hash":"bff0ab3b06e14a3c171ccd53061f8ccddb1e2fc2","modified":1534130920900},{"_id":"themes/my-theme/source/less/_typo.less","hash":"8635fe95a08614f22833c6c159ebf6cf3d731e12","modified":1534130920901},{"_id":"themes/my-theme/source/less/_widget.less","hash":"8efe52dd993757ee586528165a6e4ac7c790db8f","modified":1534130920901},{"_id":"themes/my-theme/snapshots/article.png","hash":"3f1aff6057a807b55edd2435421b59a1f4e82c40","modified":1534130920866},{"_id":"themes/my-theme/snapshots/index.png","hash":"a4aa937770d1573032f3e830be3cd75672a26036","modified":1534130920873},{"_id":"public/atom.xml","hash":"010f936799c6c96f2c05973313f1f3d6a5303c12","modified":1534218176194},{"_id":"public/search.xml","hash":"6f868285328579a4e7a15b0c21c980f124306102","modified":1534218176261},{"_id":"public/content.json","hash":"5cef0ac20aeccc7f4f607738ea3228bb0bb637dc","modified":1534218176263},{"_id":"public/about/index.html","hash":"b9985c9149590ec265d980799d64539fa4ae088e","modified":1534214396033},{"_id":"public/archives/index.html","hash":"988846e9d7488d9ce44b2f0ade5e646a48696b2d","modified":1534214396064},{"_id":"public/2018/08/13/todo-list/index.html","hash":"21d0f537631a3a8019a66e09d901e6bd2d9c25fe","modified":1534218176266},{"_id":"public/archives/2018/index.html","hash":"7631201062eb8271e31c14b7bfdaacc10eedf9be","modified":1534218176266},{"_id":"public/archives/2018/08/index.html","hash":"e1beeae625ef8ca0e6f5457ceeedcb01c3f0853a","modified":1534218176267},{"_id":"public/categories/职业规划/index.html","hash":"48e44fa487131ebbde8d6a2b6df6359aa3f5c41e","modified":1534218176266},{"_id":"public/index.html","hash":"c317b619a1f664469852c190e8cd6af7ec00e345","modified":1534218176267},{"_id":"public/images/avatar.jpg","hash":"b0f8486cd44ae3365191e773e3aaa1531017f1e4","modified":1534150105993},{"_id":"public/images/favicon.ico","hash":"359dfb2caa1b57781a813c1c12158d490c781642","modified":1534150105993},{"_id":"public/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1534150105993},{"_id":"public/fonts/icomoon.svg","hash":"37a9d40dfcd7d156cf452db75c425e797351e2b5","modified":1534150105994},{"_id":"public/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1534150105994},{"_id":"public/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1534150105994},{"_id":"public/images/about.png","hash":"de21ece0eef8733b3610e3322dada62e942926aa","modified":1534150105995},{"_id":"public/images/archives.png","hash":"712327eb3e9f2154cae6f239e87c07676bd3fb6f","modified":1534150105995},{"_id":"public/images/home.png","hash":"8f99625fdd6232b578c6ea18d05a8a1655e75338","modified":1534150105995},{"_id":"public/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1534150106011},{"_id":"public/js/app.js","hash":"17aca227d841b932ac33af4c9e02a192832fdc85","modified":1534150106011},{"_id":"public/fonts/selection.json","hash":"c38f13105ee7c35a67476dd80eaa2ffd037c124b","modified":1534150106011},{"_id":"public/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1534150106011},{"_id":"public/style.css","hash":"b47ffd6f38f3964b884b764cbf9818ae2d2bbc95","modified":1534150106341},{"_id":"source/_posts/string-video.md","hash":"b71829d5a0b54d7fcf3b9ac1034670dcf7f6eceb","modified":1534217048276},{"_id":"public/2018/08/14/string-video/index.html","hash":"883ee8e21775ca256193d46a6161b13a3ff5457d","modified":1534217048618},{"_id":"public/categories/javascript/index.html","hash":"3b6227dd2d8207abe5957012f928b614053ead8a","modified":1534217048617},{"_id":"public/tags/抖音/index.html","hash":"17f024be61cd49ee9675576b73607c1216f07025","modified":1534217048618},{"_id":"public/tags/canvas/index.html","hash":"9e9b765670a9ae1bf2f8cf35cd3c0fef33c3c6ad","modified":1534217048618},{"_id":"public/tags/javascript/index.html","hash":"18fb63fdf8da296fc3053618935daf78d1e12fa7","modified":1534217048618},{"_id":"public/images/post/WX20180814-105512@2x.png","hash":"71377531198dcc26a300fdfa0b22eaa9b6628e2d","modified":1534215367599},{"_id":"public/images/post/string-video-1.png","hash":"71377531198dcc26a300fdfa0b22eaa9b6628e2d","modified":1534215381856},{"_id":"source/images/post/string-video-1.png","hash":"71377531198dcc26a300fdfa0b22eaa9b6628e2d","modified":1534215319170},{"_id":"themes/my-theme/layout/_partial/comment.ejs","hash":"69c4271f9b4664682e46f4acd03f943905981f90","modified":1534925307876}],"Category":[{"name":"职业规划","_id":"cjks1d1n20002vzs6f1iwwrzs"},{"name":"javascript","_id":"cjkt3n0340001lhs6ublknlru"}],"Data":[],"Page":[{"_content":"## 张磊的个人博客\n\n---\n2018-08-13\n* 优化","source":"about/index.md","raw":"## 张磊的个人博客\n\n---\n2018-08-13\n* 优化","date":"2018-08-13T07:34:38.599Z","updated":"2018-08-13T07:34:38.599Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjks1d1n00001vzs62v6sulvs","content":"<h2 id=\"张磊的个人博客\"><a href=\"#张磊的个人博客\" class=\"headerlink\" title=\"张磊的个人博客\"></a>张磊的个人博客</h2><hr>\n<p>2018-08-13</p>\n<ul>\n<li>优化</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"张磊的个人博客\"><a href=\"#张磊的个人博客\" class=\"headerlink\" title=\"张磊的个人博客\"></a>张磊的个人博客</h2><hr>\n<p>2018-08-13</p>\n<ul>\n<li>优化</li>\n</ul>\n"}],"Post":[{"title":"个人职业发展历程 TODOLIST","date":"2018-08-12T16:00:00.000Z","_content":"\n持续更新中...\n\n- [x] 个人静态博客\n  > 基础搭建已完成，待优化项：\n  > - [x] 添加评论功能\n  > - [ ] 关于页面编写\n  > - [ ] 持续优化...\n- [x] {% post_link string-video 利用 canvas 实现字符流视频☞ %}\n- [ ] 个人照片视频库 （IOS APP）\n- [ ] 购买新域名，将博客地址迁移过去","source":"_posts/todo-list.md","raw":"---\ntitle: 个人职业发展历程 TODOLIST\ncategories: [职业规划]\ndate: 2018-8-13\n---\n\n持续更新中...\n\n- [x] 个人静态博客\n  > 基础搭建已完成，待优化项：\n  > - [x] 添加评论功能\n  > - [ ] 关于页面编写\n  > - [ ] 持续优化...\n- [x] {% post_link string-video 利用 canvas 实现字符流视频☞ %}\n- [ ] 个人照片视频库 （IOS APP）\n- [ ] 购买新域名，将博客地址迁移过去","slug":"todo-list","published":1,"updated":"2018-08-22T08:27:01.095Z","_id":"cjks1d1mw0000vzs6cw5anrrv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>持续更新中…</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 个人静态博客<blockquote>\n<p>基础搭建已完成，待优化项：</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 添加评论功能</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 关于页面编写</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 持续优化…</li>\n</ul>\n</blockquote>\n</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> <a href=\"/2018/08/14/string-video/\" title=\"利用 canvas 实现字符流视频☞\">利用 canvas 实现字符流视频☞</a></li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 个人照片视频库 （IOS APP）</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 购买新域名，将博客地址迁移过去</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>持续更新中…</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 个人静态博客<blockquote>\n<p>基础搭建已完成，待优化项：</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 添加评论功能</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 关于页面编写</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 持续优化…</li>\n</ul>\n</blockquote>\n</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> <a href=\"/2018/08/14/string-video/\" title=\"利用 canvas 实现字符流视频☞\">利用 canvas 实现字符流视频☞</a></li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 个人照片视频库 （IOS APP）</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 购买新域名，将博客地址迁移过去</li>\n</ul>\n"},{"title":"利用 canvas 实现字符流视频","date":"2018-08-13T16:00:00.000Z","_content":"\n最近刷抖音越来越频繁，在里面页发现了不少技术相关的视频，今天这里说到的*字符流视频*就是其中之一\n\n一开始我也是没有思路的，毕竟 canvas 基本没用过，只能在 百度、Google 上寻求答案...\n\n### 实现思路\n1. 利用 `input` 获取到视频，并转成 `HTMLVideDOM`\n2. 将视频通过 `drawImage()` 画到 canvas 上，并通过 `getImageData()` 获取画布上的信息，计算灰度值，并替换成字符，越深替换的字符越密集\n3. 将替换好的字符视频画到画布上\n4. 更改视频的 `currentTime` 属性，通过 `window.requestAnimationFrame()` 重复 2、3 步\n\n> 思路借鉴自 [js视频转字符画 —— 写一个属于自己的字符转换器](https://juejin.im/post/5b5ec60d6fb9a04f8a219a1d)\n\n<!-- more -->\n### 页面初始化\n\n初始化页面大体布局，全局变量，CSS 样式看个人喜好\n\n```\n  ...\n  <div id=\"container\">\n    <input type=\"file\" id=\"input-file\" accept=\".mp4\" />\n    <div id=\"video-box\">\n        <canvas id=\"canvas\"></canvas>\n        <canvas id=\"canvas-show\"></canvas>\n    </div>\n  </div>\n\n  <script>\n    const inputFile = document.getElementById('input-file'); // input\n    const canvas = document.getElementById('canvas'); // 画原始视频的 canvas\n    const canvasShow = document.getElementById('canvas-show'); // 画字符流视频的 canvas\n    const ctx = canvas.getContext('2d');\n    const ctxShow = canvasShow.getContext('2d');\n    const size = { w: 0, h: 0 }; // 视频大小\n    let afid = null; // requestAnimationFrame 的 id\n    let videoDom = document.createElement(\"VIDEO\");\n\n    ...\n  </script>\n```\n\n### 利用 `input` 获取到视频，并转成 `HTMLVideDOM`\n\n通过 `input` 的 `change` 事件，监听文件是否被上传了，并将上传的视频信息获取到，通过 `URL.createObjectURL()` 生成一个视频地址，并赋值给穿件好的 `video` 元素\n\n`await new Promise(res => videoDom.addEventListener('canplay', res));` 是为了等待视频被加载完成\n\n最后规定一下视频的大小，开始执行动画操作\n\n```\n  inputFile.addEventListener('change', async ({ target: { files } }) => {\n    const file = files[0];\n    const url = URL.createObjectURL(file);\n\n    videoDom.src = url;\n    await new Promise(res => videoDom.addEventListener('canplay', res));\n    \n    const { videoHeight, videoWidth } = videoDom;\n \n    size.w = videoWidth * 0.5;\n    size.h = videoHeight * 0.5;\n\n    canvas.width = size.w;\n    canvas.height = size.h;\n    canvasShow.width = size.w;\n    canvasShow.height = size.h;\n\n    await playVideo();\n  });\n```\n\n### 执行动画操作\n此部分是动画部分，主要是修改视频的当前时间，执行函数，并调用下次动画\n\n```\n  const playVideo = async ({\n    currentTime = 0,\n    curTime = Date.now(),\n    prevTime = Date.now(),\n    prevProgress,\n  } = {}) => {\n    videoDom.currentTime = currentTime;\n    await new Promise(res => videoDom.addEventListener('canplay', res));\n    ctx.drawImage(videoDom, 0, 0, size.w, size.h);\n    replaceImage();\n\n    let progress = Math.max(curTime - prevTime, 16) / 1000;\n    const nextTime = currentTime + progress;\n\n    if (nextTime >= videoDom.duration) {\n      return clearVideo();\n    }\n\n    afid = window.requestAnimationFrame(() => playVideo({\n      currentTime: nextTime,\n      curTime: Date.now(),\n      prevTime: curTime,\n      prevProgress: progress,\n    }));\n  }\n```\n\n### 读取画布信息，并替换\n这是核心内容，大体思路是获取画布信息，然后计算灰度值，根据灰度值替换成相应的字符\n\n但是如何计算灰度值呢 ？我也是百思不得其解啊，只能靠他人了，还别说，网上关于 canvas 计算灰度值的信息一大堆，公式为：`gray color = 0.299 × red color + 0.578 × green color + 0.114 * blue color` ，大体如下\n```\n  for (let _h = 0; _h < h; _h += 6) {\n    for (let _w= 0; _w< w; _w += 6) {\n      const index = (_w + w * _h) * 4;\n      const r = data[index + 0];\n      const g = data[index + 1];\n      const b = data[index + 2];\n      const gray = .299 * r + .587 * g + .114 * b;\n    }\n  }\n```\n\n然后再根据当前的灰度值替换成相应的字符 `replaceText()`\n\n```\n  const replaceImage = () => {\n    const { w, h } = size;\n    const { data } = ctx.getImageData(0, 0, w, h);\n\n    ctxShow.clearRect(0, 0, w, h);\n    for (let _h = 0; _h < h; _h += 6) {\n      for (let _w= 0; _w< w; _w += 6) {\n        const index = (_w + w * _h) * 4;\n        const r = data[index + 0];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const gray = .299 * r + .587 * g + .114 * b;\n        ctxShow.fillText(replaceText(gray), _w, _h + 8);\n      }\n    }\n  }\n\n  const replaceText = (g) => {\n    const textList = ['#', '&', '@', '%', '$', 'w', '*', '+', 'o', '?', '!', ';', '^', ',', '.', ' '];\n    const i = g % 16 === 0 ? parseInt(g / 16) - 1 : parseInt(g / 16);\n    return textList[i];\n  }\n```\n\n### 效果图\n到现在为止，功能就已经实现了，小伙伴们可以去尝试一下效果吧...\n![效果图](/../images/post/string-video-1.png)","source":"_posts/string-video.md","raw":"---\ntitle: 利用 canvas 实现字符流视频\ncategories: [javascript]\ntags: [抖音, canvas, javascript]\ndate: 2018-8-14\n---\n\n最近刷抖音越来越频繁，在里面页发现了不少技术相关的视频，今天这里说到的*字符流视频*就是其中之一\n\n一开始我也是没有思路的，毕竟 canvas 基本没用过，只能在 百度、Google 上寻求答案...\n\n### 实现思路\n1. 利用 `input` 获取到视频，并转成 `HTMLVideDOM`\n2. 将视频通过 `drawImage()` 画到 canvas 上，并通过 `getImageData()` 获取画布上的信息，计算灰度值，并替换成字符，越深替换的字符越密集\n3. 将替换好的字符视频画到画布上\n4. 更改视频的 `currentTime` 属性，通过 `window.requestAnimationFrame()` 重复 2、3 步\n\n> 思路借鉴自 [js视频转字符画 —— 写一个属于自己的字符转换器](https://juejin.im/post/5b5ec60d6fb9a04f8a219a1d)\n\n<!-- more -->\n### 页面初始化\n\n初始化页面大体布局，全局变量，CSS 样式看个人喜好\n\n```\n  ...\n  <div id=\"container\">\n    <input type=\"file\" id=\"input-file\" accept=\".mp4\" />\n    <div id=\"video-box\">\n        <canvas id=\"canvas\"></canvas>\n        <canvas id=\"canvas-show\"></canvas>\n    </div>\n  </div>\n\n  <script>\n    const inputFile = document.getElementById('input-file'); // input\n    const canvas = document.getElementById('canvas'); // 画原始视频的 canvas\n    const canvasShow = document.getElementById('canvas-show'); // 画字符流视频的 canvas\n    const ctx = canvas.getContext('2d');\n    const ctxShow = canvasShow.getContext('2d');\n    const size = { w: 0, h: 0 }; // 视频大小\n    let afid = null; // requestAnimationFrame 的 id\n    let videoDom = document.createElement(\"VIDEO\");\n\n    ...\n  </script>\n```\n\n### 利用 `input` 获取到视频，并转成 `HTMLVideDOM`\n\n通过 `input` 的 `change` 事件，监听文件是否被上传了，并将上传的视频信息获取到，通过 `URL.createObjectURL()` 生成一个视频地址，并赋值给穿件好的 `video` 元素\n\n`await new Promise(res => videoDom.addEventListener('canplay', res));` 是为了等待视频被加载完成\n\n最后规定一下视频的大小，开始执行动画操作\n\n```\n  inputFile.addEventListener('change', async ({ target: { files } }) => {\n    const file = files[0];\n    const url = URL.createObjectURL(file);\n\n    videoDom.src = url;\n    await new Promise(res => videoDom.addEventListener('canplay', res));\n    \n    const { videoHeight, videoWidth } = videoDom;\n \n    size.w = videoWidth * 0.5;\n    size.h = videoHeight * 0.5;\n\n    canvas.width = size.w;\n    canvas.height = size.h;\n    canvasShow.width = size.w;\n    canvasShow.height = size.h;\n\n    await playVideo();\n  });\n```\n\n### 执行动画操作\n此部分是动画部分，主要是修改视频的当前时间，执行函数，并调用下次动画\n\n```\n  const playVideo = async ({\n    currentTime = 0,\n    curTime = Date.now(),\n    prevTime = Date.now(),\n    prevProgress,\n  } = {}) => {\n    videoDom.currentTime = currentTime;\n    await new Promise(res => videoDom.addEventListener('canplay', res));\n    ctx.drawImage(videoDom, 0, 0, size.w, size.h);\n    replaceImage();\n\n    let progress = Math.max(curTime - prevTime, 16) / 1000;\n    const nextTime = currentTime + progress;\n\n    if (nextTime >= videoDom.duration) {\n      return clearVideo();\n    }\n\n    afid = window.requestAnimationFrame(() => playVideo({\n      currentTime: nextTime,\n      curTime: Date.now(),\n      prevTime: curTime,\n      prevProgress: progress,\n    }));\n  }\n```\n\n### 读取画布信息，并替换\n这是核心内容，大体思路是获取画布信息，然后计算灰度值，根据灰度值替换成相应的字符\n\n但是如何计算灰度值呢 ？我也是百思不得其解啊，只能靠他人了，还别说，网上关于 canvas 计算灰度值的信息一大堆，公式为：`gray color = 0.299 × red color + 0.578 × green color + 0.114 * blue color` ，大体如下\n```\n  for (let _h = 0; _h < h; _h += 6) {\n    for (let _w= 0; _w< w; _w += 6) {\n      const index = (_w + w * _h) * 4;\n      const r = data[index + 0];\n      const g = data[index + 1];\n      const b = data[index + 2];\n      const gray = .299 * r + .587 * g + .114 * b;\n    }\n  }\n```\n\n然后再根据当前的灰度值替换成相应的字符 `replaceText()`\n\n```\n  const replaceImage = () => {\n    const { w, h } = size;\n    const { data } = ctx.getImageData(0, 0, w, h);\n\n    ctxShow.clearRect(0, 0, w, h);\n    for (let _h = 0; _h < h; _h += 6) {\n      for (let _w= 0; _w< w; _w += 6) {\n        const index = (_w + w * _h) * 4;\n        const r = data[index + 0];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const gray = .299 * r + .587 * g + .114 * b;\n        ctxShow.fillText(replaceText(gray), _w, _h + 8);\n      }\n    }\n  }\n\n  const replaceText = (g) => {\n    const textList = ['#', '&', '@', '%', '$', 'w', '*', '+', 'o', '?', '!', ';', '^', ',', '.', ' '];\n    const i = g % 16 === 0 ? parseInt(g / 16) - 1 : parseInt(g / 16);\n    return textList[i];\n  }\n```\n\n### 效果图\n到现在为止，功能就已经实现了，小伙伴们可以去尝试一下效果吧...\n![效果图](/../images/post/string-video-1.png)","slug":"string-video","published":1,"updated":"2018-08-14T03:24:08.276Z","_id":"cjkt3n02w0000lhs6qdzjtt0c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近刷抖音越来越频繁，在里面页发现了不少技术相关的视频，今天这里说到的<em>字符流视频</em>就是其中之一</p>\n<p>一开始我也是没有思路的，毕竟 canvas 基本没用过，只能在 百度、Google 上寻求答案…</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><ol>\n<li>利用 <code>input</code> 获取到视频，并转成 <code>HTMLVideDOM</code></li>\n<li>将视频通过 <code>drawImage()</code> 画到 canvas 上，并通过 <code>getImageData()</code> 获取画布上的信息，计算灰度值，并替换成字符，越深替换的字符越密集</li>\n<li>将替换好的字符视频画到画布上</li>\n<li>更改视频的 <code>currentTime</code> 属性，通过 <code>window.requestAnimationFrame()</code> 重复 2、3 步</li>\n</ol>\n<blockquote>\n<p>思路借鉴自 <a href=\"https://juejin.im/post/5b5ec60d6fb9a04f8a219a1d\" target=\"_blank\" rel=\"noopener\">js视频转字符画 —— 写一个属于自己的字符转换器</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"页面初始化\"><a href=\"#页面初始化\" class=\"headerlink\" title=\"页面初始化\"></a>页面初始化</h3><p>初始化页面大体布局，全局变量，CSS 样式看个人喜好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;input type=&quot;file&quot; id=&quot;input-file&quot; accept=&quot;.mp4&quot; /&gt;</span><br><span class=\"line\">  &lt;div id=&quot;video-box&quot;&gt;</span><br><span class=\"line\">      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">      &lt;canvas id=&quot;canvas-show&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  const inputFile = document.getElementById(&apos;input-file&apos;); // input</span><br><span class=\"line\">  const canvas = document.getElementById(&apos;canvas&apos;); // 画原始视频的 canvas</span><br><span class=\"line\">  const canvasShow = document.getElementById(&apos;canvas-show&apos;); // 画字符流视频的 canvas</span><br><span class=\"line\">  const ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\">  const ctxShow = canvasShow.getContext(&apos;2d&apos;);</span><br><span class=\"line\">  const size = &#123; w: 0, h: 0 &#125;; // 视频大小</span><br><span class=\"line\">  let afid = null; // requestAnimationFrame 的 id</span><br><span class=\"line\">  let videoDom = document.createElement(&quot;VIDEO&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-input-获取到视频，并转成-HTMLVideDOM\"><a href=\"#利用-input-获取到视频，并转成-HTMLVideDOM\" class=\"headerlink\" title=\"利用 input 获取到视频，并转成 HTMLVideDOM\"></a>利用 <code>input</code> 获取到视频，并转成 <code>HTMLVideDOM</code></h3><p>通过 <code>input</code> 的 <code>change</code> 事件，监听文件是否被上传了，并将上传的视频信息获取到，通过 <code>URL.createObjectURL()</code> 生成一个视频地址，并赋值给穿件好的 <code>video</code> 元素</p>\n<p><code>await new Promise(res =&gt; videoDom.addEventListener(&#39;canplay&#39;, res));</code> 是为了等待视频被加载完成</p>\n<p>最后规定一下视频的大小，开始执行动画操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inputFile.addEventListener(&apos;change&apos;, async (&#123; target: &#123; files &#125; &#125;) =&gt; &#123;</span><br><span class=\"line\">  const file = files[0];</span><br><span class=\"line\">  const url = URL.createObjectURL(file);</span><br><span class=\"line\"></span><br><span class=\"line\">  videoDom.src = url;</span><br><span class=\"line\">  await new Promise(res =&gt; videoDom.addEventListener(&apos;canplay&apos;, res));</span><br><span class=\"line\">  </span><br><span class=\"line\">  const &#123; videoHeight, videoWidth &#125; = videoDom;</span><br><span class=\"line\"> </span><br><span class=\"line\">  size.w = videoWidth * 0.5;</span><br><span class=\"line\">  size.h = videoHeight * 0.5;</span><br><span class=\"line\"></span><br><span class=\"line\">  canvas.width = size.w;</span><br><span class=\"line\">  canvas.height = size.h;</span><br><span class=\"line\">  canvasShow.width = size.w;</span><br><span class=\"line\">  canvasShow.height = size.h;</span><br><span class=\"line\"></span><br><span class=\"line\">  await playVideo();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行动画操作\"><a href=\"#执行动画操作\" class=\"headerlink\" title=\"执行动画操作\"></a>执行动画操作</h3><p>此部分是动画部分，主要是修改视频的当前时间，执行函数，并调用下次动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const playVideo = async (&#123;</span><br><span class=\"line\">  currentTime = 0,</span><br><span class=\"line\">  curTime = Date.now(),</span><br><span class=\"line\">  prevTime = Date.now(),</span><br><span class=\"line\">  prevProgress,</span><br><span class=\"line\">&#125; = &#123;&#125;) =&gt; &#123;</span><br><span class=\"line\">  videoDom.currentTime = currentTime;</span><br><span class=\"line\">  await new Promise(res =&gt; videoDom.addEventListener(&apos;canplay&apos;, res));</span><br><span class=\"line\">  ctx.drawImage(videoDom, 0, 0, size.w, size.h);</span><br><span class=\"line\">  replaceImage();</span><br><span class=\"line\"></span><br><span class=\"line\">  let progress = Math.max(curTime - prevTime, 16) / 1000;</span><br><span class=\"line\">  const nextTime = currentTime + progress;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (nextTime &gt;= videoDom.duration) &#123;</span><br><span class=\"line\">    return clearVideo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  afid = window.requestAnimationFrame(() =&gt; playVideo(&#123;</span><br><span class=\"line\">    currentTime: nextTime,</span><br><span class=\"line\">    curTime: Date.now(),</span><br><span class=\"line\">    prevTime: curTime,</span><br><span class=\"line\">    prevProgress: progress,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取画布信息，并替换\"><a href=\"#读取画布信息，并替换\" class=\"headerlink\" title=\"读取画布信息，并替换\"></a>读取画布信息，并替换</h3><p>这是核心内容，大体思路是获取画布信息，然后计算灰度值，根据灰度值替换成相应的字符</p>\n<p>但是如何计算灰度值呢 ？我也是百思不得其解啊，只能靠他人了，还别说，网上关于 canvas 计算灰度值的信息一大堆，公式为：<code>gray color = 0.299 × red color + 0.578 × green color + 0.114 * blue color</code> ，大体如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let _h = 0; _h &lt; h; _h += 6) &#123;</span><br><span class=\"line\">  for (let _w= 0; _w&lt; w; _w += 6) &#123;</span><br><span class=\"line\">    const index = (_w + w * _h) * 4;</span><br><span class=\"line\">    const r = data[index + 0];</span><br><span class=\"line\">    const g = data[index + 1];</span><br><span class=\"line\">    const b = data[index + 2];</span><br><span class=\"line\">    const gray = .299 * r + .587 * g + .114 * b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后再根据当前的灰度值替换成相应的字符 <code>replaceText()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const replaceImage = () =&gt; &#123;</span><br><span class=\"line\">  const &#123; w, h &#125; = size;</span><br><span class=\"line\">  const &#123; data &#125; = ctx.getImageData(0, 0, w, h);</span><br><span class=\"line\"></span><br><span class=\"line\">  ctxShow.clearRect(0, 0, w, h);</span><br><span class=\"line\">  for (let _h = 0; _h &lt; h; _h += 6) &#123;</span><br><span class=\"line\">    for (let _w= 0; _w&lt; w; _w += 6) &#123;</span><br><span class=\"line\">      const index = (_w + w * _h) * 4;</span><br><span class=\"line\">      const r = data[index + 0];</span><br><span class=\"line\">      const g = data[index + 1];</span><br><span class=\"line\">      const b = data[index + 2];</span><br><span class=\"line\">      const gray = .299 * r + .587 * g + .114 * b;</span><br><span class=\"line\">      ctxShow.fillText(replaceText(gray), _w, _h + 8);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const replaceText = (g) =&gt; &#123;</span><br><span class=\"line\">  const textList = [&apos;#&apos;, &apos;&amp;&apos;, &apos;@&apos;, &apos;%&apos;, &apos;$&apos;, &apos;w&apos;, &apos;*&apos;, &apos;+&apos;, &apos;o&apos;, &apos;?&apos;, &apos;!&apos;, &apos;;&apos;, &apos;^&apos;, &apos;,&apos;, &apos;.&apos;, &apos; &apos;];</span><br><span class=\"line\">  const i = g % 16 === 0 ? parseInt(g / 16) - 1 : parseInt(g / 16);</span><br><span class=\"line\">  return textList[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p>到现在为止，功能就已经实现了，小伙伴们可以去尝试一下效果吧…<br><img src=\"/../images/post/string-video-1.png\" alt=\"效果图\"></p>\n","site":{"data":{}},"excerpt":"<p>最近刷抖音越来越频繁，在里面页发现了不少技术相关的视频，今天这里说到的<em>字符流视频</em>就是其中之一</p>\n<p>一开始我也是没有思路的，毕竟 canvas 基本没用过，只能在 百度、Google 上寻求答案…</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><ol>\n<li>利用 <code>input</code> 获取到视频，并转成 <code>HTMLVideDOM</code></li>\n<li>将视频通过 <code>drawImage()</code> 画到 canvas 上，并通过 <code>getImageData()</code> 获取画布上的信息，计算灰度值，并替换成字符，越深替换的字符越密集</li>\n<li>将替换好的字符视频画到画布上</li>\n<li>更改视频的 <code>currentTime</code> 属性，通过 <code>window.requestAnimationFrame()</code> 重复 2、3 步</li>\n</ol>\n<blockquote>\n<p>思路借鉴自 <a href=\"https://juejin.im/post/5b5ec60d6fb9a04f8a219a1d\" target=\"_blank\" rel=\"noopener\">js视频转字符画 —— 写一个属于自己的字符转换器</a></p>\n</blockquote>","more":"<h3 id=\"页面初始化\"><a href=\"#页面初始化\" class=\"headerlink\" title=\"页面初始化\"></a>页面初始化</h3><p>初始化页面大体布局，全局变量，CSS 样式看个人喜好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;input type=&quot;file&quot; id=&quot;input-file&quot; accept=&quot;.mp4&quot; /&gt;</span><br><span class=\"line\">  &lt;div id=&quot;video-box&quot;&gt;</span><br><span class=\"line\">      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">      &lt;canvas id=&quot;canvas-show&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  const inputFile = document.getElementById(&apos;input-file&apos;); // input</span><br><span class=\"line\">  const canvas = document.getElementById(&apos;canvas&apos;); // 画原始视频的 canvas</span><br><span class=\"line\">  const canvasShow = document.getElementById(&apos;canvas-show&apos;); // 画字符流视频的 canvas</span><br><span class=\"line\">  const ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\">  const ctxShow = canvasShow.getContext(&apos;2d&apos;);</span><br><span class=\"line\">  const size = &#123; w: 0, h: 0 &#125;; // 视频大小</span><br><span class=\"line\">  let afid = null; // requestAnimationFrame 的 id</span><br><span class=\"line\">  let videoDom = document.createElement(&quot;VIDEO&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-input-获取到视频，并转成-HTMLVideDOM\"><a href=\"#利用-input-获取到视频，并转成-HTMLVideDOM\" class=\"headerlink\" title=\"利用 input 获取到视频，并转成 HTMLVideDOM\"></a>利用 <code>input</code> 获取到视频，并转成 <code>HTMLVideDOM</code></h3><p>通过 <code>input</code> 的 <code>change</code> 事件，监听文件是否被上传了，并将上传的视频信息获取到，通过 <code>URL.createObjectURL()</code> 生成一个视频地址，并赋值给穿件好的 <code>video</code> 元素</p>\n<p><code>await new Promise(res =&gt; videoDom.addEventListener(&#39;canplay&#39;, res));</code> 是为了等待视频被加载完成</p>\n<p>最后规定一下视频的大小，开始执行动画操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inputFile.addEventListener(&apos;change&apos;, async (&#123; target: &#123; files &#125; &#125;) =&gt; &#123;</span><br><span class=\"line\">  const file = files[0];</span><br><span class=\"line\">  const url = URL.createObjectURL(file);</span><br><span class=\"line\"></span><br><span class=\"line\">  videoDom.src = url;</span><br><span class=\"line\">  await new Promise(res =&gt; videoDom.addEventListener(&apos;canplay&apos;, res));</span><br><span class=\"line\">  </span><br><span class=\"line\">  const &#123; videoHeight, videoWidth &#125; = videoDom;</span><br><span class=\"line\"> </span><br><span class=\"line\">  size.w = videoWidth * 0.5;</span><br><span class=\"line\">  size.h = videoHeight * 0.5;</span><br><span class=\"line\"></span><br><span class=\"line\">  canvas.width = size.w;</span><br><span class=\"line\">  canvas.height = size.h;</span><br><span class=\"line\">  canvasShow.width = size.w;</span><br><span class=\"line\">  canvasShow.height = size.h;</span><br><span class=\"line\"></span><br><span class=\"line\">  await playVideo();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行动画操作\"><a href=\"#执行动画操作\" class=\"headerlink\" title=\"执行动画操作\"></a>执行动画操作</h3><p>此部分是动画部分，主要是修改视频的当前时间，执行函数，并调用下次动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const playVideo = async (&#123;</span><br><span class=\"line\">  currentTime = 0,</span><br><span class=\"line\">  curTime = Date.now(),</span><br><span class=\"line\">  prevTime = Date.now(),</span><br><span class=\"line\">  prevProgress,</span><br><span class=\"line\">&#125; = &#123;&#125;) =&gt; &#123;</span><br><span class=\"line\">  videoDom.currentTime = currentTime;</span><br><span class=\"line\">  await new Promise(res =&gt; videoDom.addEventListener(&apos;canplay&apos;, res));</span><br><span class=\"line\">  ctx.drawImage(videoDom, 0, 0, size.w, size.h);</span><br><span class=\"line\">  replaceImage();</span><br><span class=\"line\"></span><br><span class=\"line\">  let progress = Math.max(curTime - prevTime, 16) / 1000;</span><br><span class=\"line\">  const nextTime = currentTime + progress;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (nextTime &gt;= videoDom.duration) &#123;</span><br><span class=\"line\">    return clearVideo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  afid = window.requestAnimationFrame(() =&gt; playVideo(&#123;</span><br><span class=\"line\">    currentTime: nextTime,</span><br><span class=\"line\">    curTime: Date.now(),</span><br><span class=\"line\">    prevTime: curTime,</span><br><span class=\"line\">    prevProgress: progress,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取画布信息，并替换\"><a href=\"#读取画布信息，并替换\" class=\"headerlink\" title=\"读取画布信息，并替换\"></a>读取画布信息，并替换</h3><p>这是核心内容，大体思路是获取画布信息，然后计算灰度值，根据灰度值替换成相应的字符</p>\n<p>但是如何计算灰度值呢 ？我也是百思不得其解啊，只能靠他人了，还别说，网上关于 canvas 计算灰度值的信息一大堆，公式为：<code>gray color = 0.299 × red color + 0.578 × green color + 0.114 * blue color</code> ，大体如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let _h = 0; _h &lt; h; _h += 6) &#123;</span><br><span class=\"line\">  for (let _w= 0; _w&lt; w; _w += 6) &#123;</span><br><span class=\"line\">    const index = (_w + w * _h) * 4;</span><br><span class=\"line\">    const r = data[index + 0];</span><br><span class=\"line\">    const g = data[index + 1];</span><br><span class=\"line\">    const b = data[index + 2];</span><br><span class=\"line\">    const gray = .299 * r + .587 * g + .114 * b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后再根据当前的灰度值替换成相应的字符 <code>replaceText()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const replaceImage = () =&gt; &#123;</span><br><span class=\"line\">  const &#123; w, h &#125; = size;</span><br><span class=\"line\">  const &#123; data &#125; = ctx.getImageData(0, 0, w, h);</span><br><span class=\"line\"></span><br><span class=\"line\">  ctxShow.clearRect(0, 0, w, h);</span><br><span class=\"line\">  for (let _h = 0; _h &lt; h; _h += 6) &#123;</span><br><span class=\"line\">    for (let _w= 0; _w&lt; w; _w += 6) &#123;</span><br><span class=\"line\">      const index = (_w + w * _h) * 4;</span><br><span class=\"line\">      const r = data[index + 0];</span><br><span class=\"line\">      const g = data[index + 1];</span><br><span class=\"line\">      const b = data[index + 2];</span><br><span class=\"line\">      const gray = .299 * r + .587 * g + .114 * b;</span><br><span class=\"line\">      ctxShow.fillText(replaceText(gray), _w, _h + 8);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const replaceText = (g) =&gt; &#123;</span><br><span class=\"line\">  const textList = [&apos;#&apos;, &apos;&amp;&apos;, &apos;@&apos;, &apos;%&apos;, &apos;$&apos;, &apos;w&apos;, &apos;*&apos;, &apos;+&apos;, &apos;o&apos;, &apos;?&apos;, &apos;!&apos;, &apos;;&apos;, &apos;^&apos;, &apos;,&apos;, &apos;.&apos;, &apos; &apos;];</span><br><span class=\"line\">  const i = g % 16 === 0 ? parseInt(g / 16) - 1 : parseInt(g / 16);</span><br><span class=\"line\">  return textList[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p>到现在为止，功能就已经实现了，小伙伴们可以去尝试一下效果吧…<br><img src=\"/../images/post/string-video-1.png\" alt=\"效果图\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjks1d1mw0000vzs6cw5anrrv","category_id":"cjks1d1n20002vzs6f1iwwrzs","_id":"cjks1d1n30003vzs63rvboxjn"},{"post_id":"cjkt3n02w0000lhs6qdzjtt0c","category_id":"cjkt3n0340001lhs6ublknlru","_id":"cjkt3n0380004lhs6mt6mf338"}],"PostTag":[{"post_id":"cjkt3n02w0000lhs6qdzjtt0c","tag_id":"cjkt3n0360002lhs63hk6tffs","_id":"cjkt3n03a0006lhs6pv3jbd8r"},{"post_id":"cjkt3n02w0000lhs6qdzjtt0c","tag_id":"cjkt3n0370003lhs6piltndl2","_id":"cjkt3n03a0007lhs6wce0kzh8"},{"post_id":"cjkt3n02w0000lhs6qdzjtt0c","tag_id":"cjkt3n0380005lhs6bdj1odoe","_id":"cjkt3n03a0008lhs6oekk1bnb"}],"Tag":[{"name":"抖音","_id":"cjkt3n0360002lhs63hk6tffs"},{"name":"canvas","_id":"cjkt3n0370003lhs6piltndl2"},{"name":"javascript","_id":"cjkt3n0380005lhs6bdj1odoe"}]}}