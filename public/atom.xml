<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Priccc</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://priccc.github.io/"/>
  <updated>2018-08-14T03:24:08.276Z</updated>
  <id>https://priccc.github.io/</id>
  
  <author>
    <name>张磊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用 canvas 实现字符流视频</title>
    <link href="https://priccc.github.io/2018/08/14/string-video/"/>
    <id>https://priccc.github.io/2018/08/14/string-video/</id>
    <published>2018-08-13T16:00:00.000Z</published>
    <updated>2018-08-14T03:24:08.276Z</updated>
    
    <content type="html"><![CDATA[<p>最近刷抖音越来越频繁，在里面页发现了不少技术相关的视频，今天这里说到的<em>字符流视频</em>就是其中之一</p><p>一开始我也是没有思路的，毕竟 canvas 基本没用过，只能在 百度、Google 上寻求答案…</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li>利用 <code>input</code> 获取到视频，并转成 <code>HTMLVideDOM</code></li><li>将视频通过 <code>drawImage()</code> 画到 canvas 上，并通过 <code>getImageData()</code> 获取画布上的信息，计算灰度值，并替换成字符，越深替换的字符越密集</li><li>将替换好的字符视频画到画布上</li><li>更改视频的 <code>currentTime</code> 属性，通过 <code>window.requestAnimationFrame()</code> 重复 2、3 步</li></ol><blockquote><p>思路借鉴自 <a href="https://juejin.im/post/5b5ec60d6fb9a04f8a219a1d" target="_blank" rel="noopener">js视频转字符画 —— 写一个属于自己的字符转换器</a></p></blockquote><a id="more"></a><h3 id="页面初始化"><a href="#页面初始化" class="headerlink" title="页面初始化"></a>页面初始化</h3><p>初始化页面大体布局，全局变量，CSS 样式看个人喜好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;file&quot; id=&quot;input-file&quot; accept=&quot;.mp4&quot; /&gt;</span><br><span class="line">  &lt;div id=&quot;video-box&quot;&gt;</span><br><span class="line">      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">      &lt;canvas id=&quot;canvas-show&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const inputFile = document.getElementById(&apos;input-file&apos;); // input</span><br><span class="line">  const canvas = document.getElementById(&apos;canvas&apos;); // 画原始视频的 canvas</span><br><span class="line">  const canvasShow = document.getElementById(&apos;canvas-show&apos;); // 画字符流视频的 canvas</span><br><span class="line">  const ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">  const ctxShow = canvasShow.getContext(&apos;2d&apos;);</span><br><span class="line">  const size = &#123; w: 0, h: 0 &#125;; // 视频大小</span><br><span class="line">  let afid = null; // requestAnimationFrame 的 id</span><br><span class="line">  let videoDom = document.createElement(&quot;VIDEO&quot;);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="利用-input-获取到视频，并转成-HTMLVideDOM"><a href="#利用-input-获取到视频，并转成-HTMLVideDOM" class="headerlink" title="利用 input 获取到视频，并转成 HTMLVideDOM"></a>利用 <code>input</code> 获取到视频，并转成 <code>HTMLVideDOM</code></h3><p>通过 <code>input</code> 的 <code>change</code> 事件，监听文件是否被上传了，并将上传的视频信息获取到，通过 <code>URL.createObjectURL()</code> 生成一个视频地址，并赋值给穿件好的 <code>video</code> 元素</p><p><code>await new Promise(res =&gt; videoDom.addEventListener(&#39;canplay&#39;, res));</code> 是为了等待视频被加载完成</p><p>最后规定一下视频的大小，开始执行动画操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">inputFile.addEventListener(&apos;change&apos;, async (&#123; target: &#123; files &#125; &#125;) =&gt; &#123;</span><br><span class="line">  const file = files[0];</span><br><span class="line">  const url = URL.createObjectURL(file);</span><br><span class="line"></span><br><span class="line">  videoDom.src = url;</span><br><span class="line">  await new Promise(res =&gt; videoDom.addEventListener(&apos;canplay&apos;, res));</span><br><span class="line">  </span><br><span class="line">  const &#123; videoHeight, videoWidth &#125; = videoDom;</span><br><span class="line"> </span><br><span class="line">  size.w = videoWidth * 0.5;</span><br><span class="line">  size.h = videoHeight * 0.5;</span><br><span class="line"></span><br><span class="line">  canvas.width = size.w;</span><br><span class="line">  canvas.height = size.h;</span><br><span class="line">  canvasShow.width = size.w;</span><br><span class="line">  canvasShow.height = size.h;</span><br><span class="line"></span><br><span class="line">  await playVideo();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="执行动画操作"><a href="#执行动画操作" class="headerlink" title="执行动画操作"></a>执行动画操作</h3><p>此部分是动画部分，主要是修改视频的当前时间，执行函数，并调用下次动画</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const playVideo = async (&#123;</span><br><span class="line">  currentTime = 0,</span><br><span class="line">  curTime = Date.now(),</span><br><span class="line">  prevTime = Date.now(),</span><br><span class="line">  prevProgress,</span><br><span class="line">&#125; = &#123;&#125;) =&gt; &#123;</span><br><span class="line">  videoDom.currentTime = currentTime;</span><br><span class="line">  await new Promise(res =&gt; videoDom.addEventListener(&apos;canplay&apos;, res));</span><br><span class="line">  ctx.drawImage(videoDom, 0, 0, size.w, size.h);</span><br><span class="line">  replaceImage();</span><br><span class="line"></span><br><span class="line">  let progress = Math.max(curTime - prevTime, 16) / 1000;</span><br><span class="line">  const nextTime = currentTime + progress;</span><br><span class="line"></span><br><span class="line">  if (nextTime &gt;= videoDom.duration) &#123;</span><br><span class="line">    return clearVideo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  afid = window.requestAnimationFrame(() =&gt; playVideo(&#123;</span><br><span class="line">    currentTime: nextTime,</span><br><span class="line">    curTime: Date.now(),</span><br><span class="line">    prevTime: curTime,</span><br><span class="line">    prevProgress: progress,</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取画布信息，并替换"><a href="#读取画布信息，并替换" class="headerlink" title="读取画布信息，并替换"></a>读取画布信息，并替换</h3><p>这是核心内容，大体思路是获取画布信息，然后计算灰度值，根据灰度值替换成相应的字符</p><p>但是如何计算灰度值呢 ？我也是百思不得其解啊，只能靠他人了，还别说，网上关于 canvas 计算灰度值的信息一大堆，公式为：<code>gray color = 0.299 × red color + 0.578 × green color + 0.114 * blue color</code> ，大体如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (let _h = 0; _h &lt; h; _h += 6) &#123;</span><br><span class="line">  for (let _w= 0; _w&lt; w; _w += 6) &#123;</span><br><span class="line">    const index = (_w + w * _h) * 4;</span><br><span class="line">    const r = data[index + 0];</span><br><span class="line">    const g = data[index + 1];</span><br><span class="line">    const b = data[index + 2];</span><br><span class="line">    const gray = .299 * r + .587 * g + .114 * b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后再根据当前的灰度值替换成相应的字符 <code>replaceText()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const replaceImage = () =&gt; &#123;</span><br><span class="line">  const &#123; w, h &#125; = size;</span><br><span class="line">  const &#123; data &#125; = ctx.getImageData(0, 0, w, h);</span><br><span class="line"></span><br><span class="line">  ctxShow.clearRect(0, 0, w, h);</span><br><span class="line">  for (let _h = 0; _h &lt; h; _h += 6) &#123;</span><br><span class="line">    for (let _w= 0; _w&lt; w; _w += 6) &#123;</span><br><span class="line">      const index = (_w + w * _h) * 4;</span><br><span class="line">      const r = data[index + 0];</span><br><span class="line">      const g = data[index + 1];</span><br><span class="line">      const b = data[index + 2];</span><br><span class="line">      const gray = .299 * r + .587 * g + .114 * b;</span><br><span class="line">      ctxShow.fillText(replaceText(gray), _w, _h + 8);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const replaceText = (g) =&gt; &#123;</span><br><span class="line">  const textList = [&apos;#&apos;, &apos;&amp;&apos;, &apos;@&apos;, &apos;%&apos;, &apos;$&apos;, &apos;w&apos;, &apos;*&apos;, &apos;+&apos;, &apos;o&apos;, &apos;?&apos;, &apos;!&apos;, &apos;;&apos;, &apos;^&apos;, &apos;,&apos;, &apos;.&apos;, &apos; &apos;];</span><br><span class="line">  const i = g % 16 === 0 ? parseInt(g / 16) - 1 : parseInt(g / 16);</span><br><span class="line">  return textList[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>到现在为止，功能就已经实现了，小伙伴们可以去尝试一下效果吧…<br><img src="/../images/post/string-video-1.png" alt="效果图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近刷抖音越来越频繁，在里面页发现了不少技术相关的视频，今天这里说到的&lt;em&gt;字符流视频&lt;/em&gt;就是其中之一&lt;/p&gt;
&lt;p&gt;一开始我也是没有思路的，毕竟 canvas 基本没用过，只能在 百度、Google 上寻求答案…&lt;/p&gt;
&lt;h3 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;利用 &lt;code&gt;input&lt;/code&gt; 获取到视频，并转成 &lt;code&gt;HTMLVideDOM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将视频通过 &lt;code&gt;drawImage()&lt;/code&gt; 画到 canvas 上，并通过 &lt;code&gt;getImageData()&lt;/code&gt; 获取画布上的信息，计算灰度值，并替换成字符，越深替换的字符越密集&lt;/li&gt;
&lt;li&gt;将替换好的字符视频画到画布上&lt;/li&gt;
&lt;li&gt;更改视频的 &lt;code&gt;currentTime&lt;/code&gt; 属性，通过 &lt;code&gt;window.requestAnimationFrame()&lt;/code&gt; 重复 2、3 步&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;思路借鉴自 &lt;a href=&quot;https://juejin.im/post/5b5ec60d6fb9a04f8a219a1d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;js视频转字符画 —— 写一个属于自己的字符转换器&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://priccc.github.io/categories/javascript/"/>
    
    
      <category term="抖音" scheme="https://priccc.github.io/tags/%E6%8A%96%E9%9F%B3/"/>
    
      <category term="canvas" scheme="https://priccc.github.io/tags/canvas/"/>
    
      <category term="javascript" scheme="https://priccc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>个人职业发展历程 TODOLIST</title>
    <link href="https://priccc.github.io/2018/08/13/todo-list/"/>
    <id>https://priccc.github.io/2018/08/13/todo-list/</id>
    <published>2018-08-12T16:00:00.000Z</published>
    <updated>2018-08-14T03:33:06.654Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新中…</p><ul><li style="list-style: none"><input type="checkbox" checked> 个人静态博客<blockquote><p>基础搭建已完成，待优化项：</p><ul><li style="list-style: none"><input type="checkbox"> 添加评论功能</li><li style="list-style: none"><input type="checkbox"> 关于页面编写</li><li style="list-style: none"><input type="checkbox"> 持续优化…</li></ul></blockquote></li><li style="list-style: none"><input type="checkbox" checked> <a href="/2018/08/14/string-video/" title="利用 canvas 实现字符流视频☞">利用 canvas 实现字符流视频☞</a></li><li style="list-style: none"><input type="checkbox"> 个人照片视频库 （IOS APP）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;持续更新中…&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt; 个人静态博客&lt;blockquote&gt;
&lt;p&gt;基础搭建已完成，待优化项：&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;list
      
    
    </summary>
    
      <category term="职业规划" scheme="https://priccc.github.io/categories/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
</feed>
